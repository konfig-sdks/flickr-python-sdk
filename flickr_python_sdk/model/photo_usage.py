# coding: utf-8

"""
    Flickr API Schema

    A subset of Flickr's API defined in Swagger format.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from flickr_python_sdk import schemas  # noqa: F401


class PhotoUsage(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            canblog = schemas.BoolSchema
            candownload = schemas.BoolSchema
            canprint = schemas.BoolSchema
            canshare = schemas.BoolSchema
            __annotations__ = {
                "canblog": canblog,
                "candownload": candownload,
                "canprint": canprint,
                "canshare": canshare,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canblog"]) -> MetaOapg.properties.canblog: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["candownload"]) -> MetaOapg.properties.candownload: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canprint"]) -> MetaOapg.properties.canprint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canshare"]) -> MetaOapg.properties.canshare: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["canblog", "candownload", "canprint", "canshare", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canblog"]) -> typing.Union[MetaOapg.properties.canblog, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["candownload"]) -> typing.Union[MetaOapg.properties.candownload, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canprint"]) -> typing.Union[MetaOapg.properties.canprint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canshare"]) -> typing.Union[MetaOapg.properties.canshare, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["canblog", "candownload", "canprint", "canshare", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        canblog: typing.Union[MetaOapg.properties.canblog, bool, schemas.Unset] = schemas.unset,
        candownload: typing.Union[MetaOapg.properties.candownload, bool, schemas.Unset] = schemas.unset,
        canprint: typing.Union[MetaOapg.properties.canprint, bool, schemas.Unset] = schemas.unset,
        canshare: typing.Union[MetaOapg.properties.canshare, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PhotoUsage':
        return super().__new__(
            cls,
            *args,
            canblog=canblog,
            candownload=candownload,
            canprint=canprint,
            canshare=canshare,
            _configuration=_configuration,
            **kwargs,
        )
