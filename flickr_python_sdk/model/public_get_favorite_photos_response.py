# coding: utf-8

"""
    Flickr API Schema

    A subset of Flickr's API defined in Swagger format.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from flickr_python_sdk import schemas  # noqa: F401


class PublicGetFavoritePhotosResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            page = schemas.NumberSchema
            pages = schemas.NumberSchema
            perpage = schemas.NumberSchema
            
            
            class photos(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Photo']:
                        return Photo
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Photo'], typing.List['Photo']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'photos':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Photo':
                    return super().__getitem__(i)
            total = schemas.NumberSchema
            __annotations__ = {
                "page": page,
                "pages": pages,
                "perpage": perpage,
                "photos": photos,
                "total": total,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["page"]) -> MetaOapg.properties.page: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pages"]) -> MetaOapg.properties.pages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["perpage"]) -> MetaOapg.properties.perpage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["photos"]) -> MetaOapg.properties.photos: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["page", "pages", "perpage", "photos", "total", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["page"]) -> typing.Union[MetaOapg.properties.page, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pages"]) -> typing.Union[MetaOapg.properties.pages, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["perpage"]) -> typing.Union[MetaOapg.properties.perpage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["photos"]) -> typing.Union[MetaOapg.properties.photos, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["page", "pages", "perpage", "photos", "total", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        page: typing.Union[MetaOapg.properties.page, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pages: typing.Union[MetaOapg.properties.pages, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        perpage: typing.Union[MetaOapg.properties.perpage, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        photos: typing.Union[MetaOapg.properties.photos, list, tuple, schemas.Unset] = schemas.unset,
        total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PublicGetFavoritePhotosResponse':
        return super().__new__(
            cls,
            *args,
            page=page,
            pages=pages,
            perpage=perpage,
            photos=photos,
            total=total,
            _configuration=_configuration,
            **kwargs,
        )

from flickr_python_sdk.model.photo import Photo
