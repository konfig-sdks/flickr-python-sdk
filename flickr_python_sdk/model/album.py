# coding: utf-8

"""
    Flickr API Schema

    A subset of Flickr's API defined in Swagger format.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from flickr_python_sdk import schemas  # noqa: F401


class Album(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            description = schemas.StrSchema
            can_comment = schemas.BoolSchema
            count_comments = schemas.NumberSchema
            count_views = schemas.NumberSchema
            date_create = schemas.NumberSchema
            date_update = schemas.NumberSchema
            farm = schemas.StrSchema
            id = schemas.StrSchema
            photos = schemas.NumberSchema
            primary = schemas.StrSchema
            secret = schemas.StrSchema
            server = schemas.StrSchema
            videos = schemas.NumberSchema
            __annotations__ = {
                "title": title,
                "description": description,
                "can_comment": can_comment,
                "count_comments": count_comments,
                "count_views": count_views,
                "date_create": date_create,
                "date_update": date_update,
                "farm": farm,
                "id": id,
                "photos": photos,
                "primary": primary,
                "secret": secret,
                "server": server,
                "videos": videos,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_comment"]) -> MetaOapg.properties.can_comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count_comments"]) -> MetaOapg.properties.count_comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count_views"]) -> MetaOapg.properties.count_views: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_update"]) -> MetaOapg.properties.date_update: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["farm"]) -> MetaOapg.properties.farm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["photos"]) -> MetaOapg.properties.photos: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary"]) -> MetaOapg.properties.primary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["server"]) -> MetaOapg.properties.server: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["videos"]) -> MetaOapg.properties.videos: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "description", "can_comment", "count_comments", "count_views", "date_create", "date_update", "farm", "id", "photos", "primary", "secret", "server", "videos", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_comment"]) -> typing.Union[MetaOapg.properties.can_comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count_comments"]) -> typing.Union[MetaOapg.properties.count_comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count_views"]) -> typing.Union[MetaOapg.properties.count_views, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_create"]) -> typing.Union[MetaOapg.properties.date_create, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_update"]) -> typing.Union[MetaOapg.properties.date_update, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["farm"]) -> typing.Union[MetaOapg.properties.farm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["photos"]) -> typing.Union[MetaOapg.properties.photos, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary"]) -> typing.Union[MetaOapg.properties.primary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret"]) -> typing.Union[MetaOapg.properties.secret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["server"]) -> typing.Union[MetaOapg.properties.server, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["videos"]) -> typing.Union[MetaOapg.properties.videos, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "description", "can_comment", "count_comments", "count_views", "date_create", "date_update", "farm", "id", "photos", "primary", "secret", "server", "videos", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        can_comment: typing.Union[MetaOapg.properties.can_comment, bool, schemas.Unset] = schemas.unset,
        count_comments: typing.Union[MetaOapg.properties.count_comments, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        count_views: typing.Union[MetaOapg.properties.count_views, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        date_create: typing.Union[MetaOapg.properties.date_create, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        date_update: typing.Union[MetaOapg.properties.date_update, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        farm: typing.Union[MetaOapg.properties.farm, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        photos: typing.Union[MetaOapg.properties.photos, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        primary: typing.Union[MetaOapg.properties.primary, str, schemas.Unset] = schemas.unset,
        secret: typing.Union[MetaOapg.properties.secret, str, schemas.Unset] = schemas.unset,
        server: typing.Union[MetaOapg.properties.server, str, schemas.Unset] = schemas.unset,
        videos: typing.Union[MetaOapg.properties.videos, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Album':
        return super().__new__(
            cls,
            *args,
            title=title,
            description=description,
            can_comment=can_comment,
            count_comments=count_comments,
            count_views=count_views,
            date_create=date_create,
            date_update=date_update,
            farm=farm,
            id=id,
            photos=photos,
            primary=primary,
            secret=secret,
            server=server,
            videos=videos,
            _configuration=_configuration,
            **kwargs,
        )
