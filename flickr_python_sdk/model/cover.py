# coding: utf-8

"""
    Flickr API Schema

    A subset of Flickr's API defined in Swagger format.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from flickr_python_sdk import schemas  # noqa: F401


class Cover(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            farm = schemas.StrSchema
            id = schemas.StrSchema
            isfamily = schemas.BoolSchema
            isfriend = schemas.BoolSchema
            ispublic = schemas.BoolSchema
            owner = schemas.StrSchema
            secret = schemas.StrSchema
            server = schemas.StrSchema
            y = schemas.StrSchema
            __annotations__ = {
                "title": title,
                "farm": farm,
                "id": id,
                "isfamily": isfamily,
                "isfriend": isfriend,
                "ispublic": ispublic,
                "owner": owner,
                "secret": secret,
                "server": server,
                "y": y,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["farm"]) -> MetaOapg.properties.farm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isfamily"]) -> MetaOapg.properties.isfamily: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isfriend"]) -> MetaOapg.properties.isfriend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ispublic"]) -> MetaOapg.properties.ispublic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["server"]) -> MetaOapg.properties.server: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["y"]) -> MetaOapg.properties.y: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "farm", "id", "isfamily", "isfriend", "ispublic", "owner", "secret", "server", "y", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["farm"]) -> typing.Union[MetaOapg.properties.farm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isfamily"]) -> typing.Union[MetaOapg.properties.isfamily, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isfriend"]) -> typing.Union[MetaOapg.properties.isfriend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ispublic"]) -> typing.Union[MetaOapg.properties.ispublic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union[MetaOapg.properties.owner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret"]) -> typing.Union[MetaOapg.properties.secret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["server"]) -> typing.Union[MetaOapg.properties.server, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["y"]) -> typing.Union[MetaOapg.properties.y, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "farm", "id", "isfamily", "isfriend", "ispublic", "owner", "secret", "server", "y", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        farm: typing.Union[MetaOapg.properties.farm, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        isfamily: typing.Union[MetaOapg.properties.isfamily, bool, schemas.Unset] = schemas.unset,
        isfriend: typing.Union[MetaOapg.properties.isfriend, bool, schemas.Unset] = schemas.unset,
        ispublic: typing.Union[MetaOapg.properties.ispublic, bool, schemas.Unset] = schemas.unset,
        owner: typing.Union[MetaOapg.properties.owner, str, schemas.Unset] = schemas.unset,
        secret: typing.Union[MetaOapg.properties.secret, str, schemas.Unset] = schemas.unset,
        server: typing.Union[MetaOapg.properties.server, str, schemas.Unset] = schemas.unset,
        y: typing.Union[MetaOapg.properties.y, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Cover':
        return super().__new__(
            cls,
            *args,
            title=title,
            farm=farm,
            id=id,
            isfamily=isfamily,
            isfriend=isfriend,
            ispublic=ispublic,
            owner=owner,
            secret=secret,
            server=server,
            y=y,
            _configuration=_configuration,
            **kwargs,
        )
