# coding: utf-8

"""
    Flickr API Schema

    A subset of Flickr's API defined in Swagger format.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from flickr_python_sdk import schemas  # noqa: F401


class ContextPhoto(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            farm = schemas.StrSchema
            id = schemas.StrSchema
            is_faved = schemas.BoolSchema
            license = schemas.IntSchema
            media = schemas.StrSchema
            owner = schemas.StrSchema
            safe = schemas.BoolSchema
            secret = schemas.StrSchema
            server = schemas.StrSchema
            thumb = schemas.StrSchema
            url = schemas.StrSchema
            __annotations__ = {
                "title": title,
                "farm": farm,
                "id": id,
                "is_faved": is_faved,
                "license": license,
                "media": media,
                "owner": owner,
                "safe": safe,
                "secret": secret,
                "server": server,
                "thumb": thumb,
                "url": url,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["farm"]) -> MetaOapg.properties.farm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_faved"]) -> MetaOapg.properties.is_faved: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["license"]) -> MetaOapg.properties.license: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["media"]) -> MetaOapg.properties.media: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["safe"]) -> MetaOapg.properties.safe: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["server"]) -> MetaOapg.properties.server: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thumb"]) -> MetaOapg.properties.thumb: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "farm", "id", "is_faved", "license", "media", "owner", "safe", "secret", "server", "thumb", "url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["farm"]) -> typing.Union[MetaOapg.properties.farm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_faved"]) -> typing.Union[MetaOapg.properties.is_faved, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["license"]) -> typing.Union[MetaOapg.properties.license, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["media"]) -> typing.Union[MetaOapg.properties.media, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union[MetaOapg.properties.owner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["safe"]) -> typing.Union[MetaOapg.properties.safe, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret"]) -> typing.Union[MetaOapg.properties.secret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["server"]) -> typing.Union[MetaOapg.properties.server, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thumb"]) -> typing.Union[MetaOapg.properties.thumb, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "farm", "id", "is_faved", "license", "media", "owner", "safe", "secret", "server", "thumb", "url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        farm: typing.Union[MetaOapg.properties.farm, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        is_faved: typing.Union[MetaOapg.properties.is_faved, bool, schemas.Unset] = schemas.unset,
        license: typing.Union[MetaOapg.properties.license, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        media: typing.Union[MetaOapg.properties.media, str, schemas.Unset] = schemas.unset,
        owner: typing.Union[MetaOapg.properties.owner, str, schemas.Unset] = schemas.unset,
        safe: typing.Union[MetaOapg.properties.safe, bool, schemas.Unset] = schemas.unset,
        secret: typing.Union[MetaOapg.properties.secret, str, schemas.Unset] = schemas.unset,
        server: typing.Union[MetaOapg.properties.server, str, schemas.Unset] = schemas.unset,
        thumb: typing.Union[MetaOapg.properties.thumb, str, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ContextPhoto':
        return super().__new__(
            cls,
            *args,
            title=title,
            farm=farm,
            id=id,
            is_faved=is_faved,
            license=license,
            media=media,
            owner=owner,
            safe=safe,
            secret=secret,
            server=server,
            thumb=thumb,
            url=url,
            _configuration=_configuration,
            **kwargs,
        )
