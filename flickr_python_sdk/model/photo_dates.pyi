# coding: utf-8

"""
    Flickr API Schema

    A subset of Flickr's API defined in Swagger format.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from flickr_python_sdk import schemas  # noqa: F401


class PhotoDates(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            lastupdate = schemas.StrSchema
            posted = schemas.StrSchema
            taken = schemas.StrSchema
            takengranularity = schemas.StrSchema
            takenunknown = schemas.BoolSchema
            __annotations__ = {
                "lastupdate": lastupdate,
                "posted": posted,
                "taken": taken,
                "takengranularity": takengranularity,
                "takenunknown": takenunknown,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastupdate"]) -> MetaOapg.properties.lastupdate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["posted"]) -> MetaOapg.properties.posted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taken"]) -> MetaOapg.properties.taken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["takengranularity"]) -> MetaOapg.properties.takengranularity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["takenunknown"]) -> MetaOapg.properties.takenunknown: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["lastupdate", "posted", "taken", "takengranularity", "takenunknown", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastupdate"]) -> typing.Union[MetaOapg.properties.lastupdate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["posted"]) -> typing.Union[MetaOapg.properties.posted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taken"]) -> typing.Union[MetaOapg.properties.taken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["takengranularity"]) -> typing.Union[MetaOapg.properties.takengranularity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["takenunknown"]) -> typing.Union[MetaOapg.properties.takenunknown, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["lastupdate", "posted", "taken", "takengranularity", "takenunknown", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        lastupdate: typing.Union[MetaOapg.properties.lastupdate, str, schemas.Unset] = schemas.unset,
        posted: typing.Union[MetaOapg.properties.posted, str, schemas.Unset] = schemas.unset,
        taken: typing.Union[MetaOapg.properties.taken, str, schemas.Unset] = schemas.unset,
        takengranularity: typing.Union[MetaOapg.properties.takengranularity, str, schemas.Unset] = schemas.unset,
        takenunknown: typing.Union[MetaOapg.properties.takenunknown, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PhotoDates':
        return super().__new__(
            cls,
            *args,
            lastupdate=lastupdate,
            posted=posted,
            taken=taken,
            takengranularity=takengranularity,
            takenunknown=takenunknown,
            _configuration=_configuration,
            **kwargs,
        )
