# coding: utf-8

"""
    Flickr API Schema

    A subset of Flickr's API defined in Swagger format.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from flickr_python_sdk import schemas  # noqa: F401


class PersonPhotos(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def count() -> typing.Type['PersonPhotosCount']:
                return PersonPhotosCount
        
            @staticmethod
            def firstdate() -> typing.Type['PersonPhotosFirstdate']:
                return PersonPhotosFirstdate
        
            @staticmethod
            def firstdatetaken() -> typing.Type['PersonPhotosFirstdatetaken']:
                return PersonPhotosFirstdatetaken
        
            @staticmethod
            def views() -> typing.Type['PersonPhotosViews']:
                return PersonPhotosViews
            __annotations__ = {
                "count": count,
                "firstdate": firstdate,
                "firstdatetaken": firstdatetaken,
                "views": views,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count"]) -> 'PersonPhotosCount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstdate"]) -> 'PersonPhotosFirstdate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstdatetaken"]) -> 'PersonPhotosFirstdatetaken': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["views"]) -> 'PersonPhotosViews': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["count", "firstdate", "firstdatetaken", "views", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> typing.Union['PersonPhotosCount', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstdate"]) -> typing.Union['PersonPhotosFirstdate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstdatetaken"]) -> typing.Union['PersonPhotosFirstdatetaken', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["views"]) -> typing.Union['PersonPhotosViews', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["count", "firstdate", "firstdatetaken", "views", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        count: typing.Union['PersonPhotosCount', schemas.Unset] = schemas.unset,
        firstdate: typing.Union['PersonPhotosFirstdate', schemas.Unset] = schemas.unset,
        firstdatetaken: typing.Union['PersonPhotosFirstdatetaken', schemas.Unset] = schemas.unset,
        views: typing.Union['PersonPhotosViews', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PersonPhotos':
        return super().__new__(
            cls,
            *args,
            count=count,
            firstdate=firstdate,
            firstdatetaken=firstdatetaken,
            views=views,
            _configuration=_configuration,
            **kwargs,
        )

from flickr_python_sdk.model.person_photos_count import PersonPhotosCount
from flickr_python_sdk.model.person_photos_firstdate import PersonPhotosFirstdate
from flickr_python_sdk.model.person_photos_firstdatetaken import PersonPhotosFirstdatetaken
from flickr_python_sdk.model.person_photos_views import PersonPhotosViews
