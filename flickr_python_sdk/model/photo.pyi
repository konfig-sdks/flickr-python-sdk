# coding: utf-8

"""
    Flickr API Schema

    A subset of Flickr's API defined in Swagger format.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from flickr_python_sdk import schemas  # noqa: F401


class Photo(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def tags() -> typing.Type['PhotoTags']:
                return PhotoTags
        
            @staticmethod
            def title() -> typing.Type['PhotoTitle']:
                return PhotoTitle
        
            @staticmethod
            def description() -> typing.Type['PhotoDescription']:
                return PhotoDescription
        
            @staticmethod
            def comments() -> typing.Type['PhotoComments']:
                return PhotoComments
        
            @staticmethod
            def dates() -> typing.Type['PhotoDates']:
                return PhotoDates
            dateuploaded = schemas.StrSchema
        
            @staticmethod
            def editability() -> typing.Type['PhotoEditability']:
                return PhotoEditability
            farm = schemas.StrSchema
            id = schemas.StrSchema
            isfavorite = schemas.BoolSchema
            license = schemas.StrSchema
            media = schemas.StrSchema
        
            @staticmethod
            def notes() -> typing.Type['PhotoNotes']:
                return PhotoNotes
            originalsecret = schemas.StrSchema
        
            @staticmethod
            def owner() -> typing.Type['Owner']:
                return Owner
        
            @staticmethod
            def people() -> typing.Type['PhotoPeople']:
                return PhotoPeople
        
            @staticmethod
            def permissions() -> typing.Type['PhotoPermissions']:
                return PhotoPermissions
        
            @staticmethod
            def publiceditability() -> typing.Type['PhotoPubliceditability']:
                return PhotoPubliceditability
            rotation = schemas.StrSchema
            safe = schemas.BoolSchema
            safety_level = schemas.StrSchema
            secret = schemas.StrSchema
            server = schemas.StrSchema
        
            @staticmethod
            def urls() -> typing.Type['PhotoUrls']:
                return PhotoUrls
        
            @staticmethod
            def usage() -> typing.Type['PhotoUsage']:
                return PhotoUsage
            views = schemas.StrSchema
        
            @staticmethod
            def visibility() -> typing.Type['PhotoVisibility']:
                return PhotoVisibility
            __annotations__ = {
                "tags": tags,
                "title": title,
                "description": description,
                "comments": comments,
                "dates": dates,
                "dateuploaded": dateuploaded,
                "editability": editability,
                "farm": farm,
                "id": id,
                "isfavorite": isfavorite,
                "license": license,
                "media": media,
                "notes": notes,
                "originalsecret": originalsecret,
                "owner": owner,
                "people": people,
                "permissions": permissions,
                "publiceditability": publiceditability,
                "rotation": rotation,
                "safe": safe,
                "safety_level": safety_level,
                "secret": secret,
                "server": server,
                "urls": urls,
                "usage": usage,
                "views": views,
                "visibility": visibility,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> 'PhotoTags': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> 'PhotoTitle': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> 'PhotoDescription': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comments"]) -> 'PhotoComments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dates"]) -> 'PhotoDates': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateuploaded"]) -> MetaOapg.properties.dateuploaded: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["editability"]) -> 'PhotoEditability': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["farm"]) -> MetaOapg.properties.farm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isfavorite"]) -> MetaOapg.properties.isfavorite: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["license"]) -> MetaOapg.properties.license: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["media"]) -> MetaOapg.properties.media: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> 'PhotoNotes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originalsecret"]) -> MetaOapg.properties.originalsecret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> 'Owner': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["people"]) -> 'PhotoPeople': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permissions"]) -> 'PhotoPermissions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publiceditability"]) -> 'PhotoPubliceditability': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rotation"]) -> MetaOapg.properties.rotation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["safe"]) -> MetaOapg.properties.safe: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["safety_level"]) -> MetaOapg.properties.safety_level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["server"]) -> MetaOapg.properties.server: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["urls"]) -> 'PhotoUrls': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usage"]) -> 'PhotoUsage': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["views"]) -> MetaOapg.properties.views: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visibility"]) -> 'PhotoVisibility': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "title", "description", "comments", "dates", "dateuploaded", "editability", "farm", "id", "isfavorite", "license", "media", "notes", "originalsecret", "owner", "people", "permissions", "publiceditability", "rotation", "safe", "safety_level", "secret", "server", "urls", "usage", "views", "visibility", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union['PhotoTags', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union['PhotoTitle', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union['PhotoDescription', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> typing.Union['PhotoComments', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dates"]) -> typing.Union['PhotoDates', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateuploaded"]) -> typing.Union[MetaOapg.properties.dateuploaded, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["editability"]) -> typing.Union['PhotoEditability', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["farm"]) -> typing.Union[MetaOapg.properties.farm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isfavorite"]) -> typing.Union[MetaOapg.properties.isfavorite, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["license"]) -> typing.Union[MetaOapg.properties.license, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["media"]) -> typing.Union[MetaOapg.properties.media, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union['PhotoNotes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originalsecret"]) -> typing.Union[MetaOapg.properties.originalsecret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union['Owner', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["people"]) -> typing.Union['PhotoPeople', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permissions"]) -> typing.Union['PhotoPermissions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publiceditability"]) -> typing.Union['PhotoPubliceditability', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rotation"]) -> typing.Union[MetaOapg.properties.rotation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["safe"]) -> typing.Union[MetaOapg.properties.safe, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["safety_level"]) -> typing.Union[MetaOapg.properties.safety_level, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret"]) -> typing.Union[MetaOapg.properties.secret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["server"]) -> typing.Union[MetaOapg.properties.server, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["urls"]) -> typing.Union['PhotoUrls', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usage"]) -> typing.Union['PhotoUsage', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["views"]) -> typing.Union[MetaOapg.properties.views, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visibility"]) -> typing.Union['PhotoVisibility', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "title", "description", "comments", "dates", "dateuploaded", "editability", "farm", "id", "isfavorite", "license", "media", "notes", "originalsecret", "owner", "people", "permissions", "publiceditability", "rotation", "safe", "safety_level", "secret", "server", "urls", "usage", "views", "visibility", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tags: typing.Union['PhotoTags', schemas.Unset] = schemas.unset,
        title: typing.Union['PhotoTitle', schemas.Unset] = schemas.unset,
        description: typing.Union['PhotoDescription', schemas.Unset] = schemas.unset,
        comments: typing.Union['PhotoComments', schemas.Unset] = schemas.unset,
        dates: typing.Union['PhotoDates', schemas.Unset] = schemas.unset,
        dateuploaded: typing.Union[MetaOapg.properties.dateuploaded, str, schemas.Unset] = schemas.unset,
        editability: typing.Union['PhotoEditability', schemas.Unset] = schemas.unset,
        farm: typing.Union[MetaOapg.properties.farm, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        isfavorite: typing.Union[MetaOapg.properties.isfavorite, bool, schemas.Unset] = schemas.unset,
        license: typing.Union[MetaOapg.properties.license, str, schemas.Unset] = schemas.unset,
        media: typing.Union[MetaOapg.properties.media, str, schemas.Unset] = schemas.unset,
        notes: typing.Union['PhotoNotes', schemas.Unset] = schemas.unset,
        originalsecret: typing.Union[MetaOapg.properties.originalsecret, str, schemas.Unset] = schemas.unset,
        owner: typing.Union['Owner', schemas.Unset] = schemas.unset,
        people: typing.Union['PhotoPeople', schemas.Unset] = schemas.unset,
        permissions: typing.Union['PhotoPermissions', schemas.Unset] = schemas.unset,
        publiceditability: typing.Union['PhotoPubliceditability', schemas.Unset] = schemas.unset,
        rotation: typing.Union[MetaOapg.properties.rotation, str, schemas.Unset] = schemas.unset,
        safe: typing.Union[MetaOapg.properties.safe, bool, schemas.Unset] = schemas.unset,
        safety_level: typing.Union[MetaOapg.properties.safety_level, str, schemas.Unset] = schemas.unset,
        secret: typing.Union[MetaOapg.properties.secret, str, schemas.Unset] = schemas.unset,
        server: typing.Union[MetaOapg.properties.server, str, schemas.Unset] = schemas.unset,
        urls: typing.Union['PhotoUrls', schemas.Unset] = schemas.unset,
        usage: typing.Union['PhotoUsage', schemas.Unset] = schemas.unset,
        views: typing.Union[MetaOapg.properties.views, str, schemas.Unset] = schemas.unset,
        visibility: typing.Union['PhotoVisibility', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Photo':
        return super().__new__(
            cls,
            *args,
            tags=tags,
            title=title,
            description=description,
            comments=comments,
            dates=dates,
            dateuploaded=dateuploaded,
            editability=editability,
            farm=farm,
            id=id,
            isfavorite=isfavorite,
            license=license,
            media=media,
            notes=notes,
            originalsecret=originalsecret,
            owner=owner,
            people=people,
            permissions=permissions,
            publiceditability=publiceditability,
            rotation=rotation,
            safe=safe,
            safety_level=safety_level,
            secret=secret,
            server=server,
            urls=urls,
            usage=usage,
            views=views,
            visibility=visibility,
            _configuration=_configuration,
            **kwargs,
        )

from flickr_python_sdk.model.owner import Owner
from flickr_python_sdk.model.photo_comments import PhotoComments
from flickr_python_sdk.model.photo_dates import PhotoDates
from flickr_python_sdk.model.photo_description import PhotoDescription
from flickr_python_sdk.model.photo_editability import PhotoEditability
from flickr_python_sdk.model.photo_notes import PhotoNotes
from flickr_python_sdk.model.photo_people import PhotoPeople
from flickr_python_sdk.model.photo_permissions import PhotoPermissions
from flickr_python_sdk.model.photo_publiceditability import PhotoPubliceditability
from flickr_python_sdk.model.photo_tags import PhotoTags
from flickr_python_sdk.model.photo_title import PhotoTitle
from flickr_python_sdk.model.photo_urls import PhotoUrls
from flickr_python_sdk.model.photo_usage import PhotoUsage
from flickr_python_sdk.model.photo_visibility import PhotoVisibility
