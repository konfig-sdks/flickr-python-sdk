# coding: utf-8

"""
    Flickr API Schema

    A subset of Flickr's API defined in Swagger format.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from flickr_python_sdk import schemas  # noqa: F401


class PublicGetPhotoExifResponsePhotoExifItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            label = schemas.StrSchema
        
            @staticmethod
            def raw() -> typing.Type['PublicGetPhotoExifResponsePhotoExifItemRaw']:
                return PublicGetPhotoExifResponsePhotoExifItemRaw
            tag = schemas.StrSchema
            tagspace = schemas.StrSchema
            tagspaceid = schemas.StrSchema
            __annotations__ = {
                "label": label,
                "raw": raw,
                "tag": tag,
                "tagspace": tagspace,
                "tagspaceid": tagspaceid,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["raw"]) -> 'PublicGetPhotoExifResponsePhotoExifItemRaw': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag"]) -> MetaOapg.properties.tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tagspace"]) -> MetaOapg.properties.tagspace: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tagspaceid"]) -> MetaOapg.properties.tagspaceid: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["label", "raw", "tag", "tagspace", "tagspaceid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["raw"]) -> typing.Union['PublicGetPhotoExifResponsePhotoExifItemRaw', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag"]) -> typing.Union[MetaOapg.properties.tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tagspace"]) -> typing.Union[MetaOapg.properties.tagspace, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tagspaceid"]) -> typing.Union[MetaOapg.properties.tagspaceid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["label", "raw", "tag", "tagspace", "tagspaceid", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        raw: typing.Union['PublicGetPhotoExifResponsePhotoExifItemRaw', schemas.Unset] = schemas.unset,
        tag: typing.Union[MetaOapg.properties.tag, str, schemas.Unset] = schemas.unset,
        tagspace: typing.Union[MetaOapg.properties.tagspace, str, schemas.Unset] = schemas.unset,
        tagspaceid: typing.Union[MetaOapg.properties.tagspaceid, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PublicGetPhotoExifResponsePhotoExifItem':
        return super().__new__(
            cls,
            *args,
            label=label,
            raw=raw,
            tag=tag,
            tagspace=tagspace,
            tagspaceid=tagspaceid,
            _configuration=_configuration,
            **kwargs,
        )

from flickr_python_sdk.model.public_get_photo_exif_response_photo_exif_item_raw import PublicGetPhotoExifResponsePhotoExifItemRaw
