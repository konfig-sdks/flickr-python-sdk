# coding: utf-8

"""
    Flickr API Schema

    A subset of Flickr's API defined in Swagger format.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from flickr_python_sdk import schemas  # noqa: F401


class GroupRestrictions(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            art_ok = schemas.BoolSchema
            has_geo = schemas.BoolSchema
            images_ok = schemas.BoolSchema
            moderate_ok = schemas.BoolSchema
            photos_ok = schemas.BoolSchema
            restricted_ok = schemas.BoolSchema
            safe_ok = schemas.BoolSchema
            screens_ok = schemas.BoolSchema
            videos_ok = schemas.BoolSchema
            __annotations__ = {
                "art_ok": art_ok,
                "has_geo": has_geo,
                "images_ok": images_ok,
                "moderate_ok": moderate_ok,
                "photos_ok": photos_ok,
                "restricted_ok": restricted_ok,
                "safe_ok": safe_ok,
                "screens_ok": screens_ok,
                "videos_ok": videos_ok,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["art_ok"]) -> MetaOapg.properties.art_ok: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_geo"]) -> MetaOapg.properties.has_geo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["images_ok"]) -> MetaOapg.properties.images_ok: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["moderate_ok"]) -> MetaOapg.properties.moderate_ok: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["photos_ok"]) -> MetaOapg.properties.photos_ok: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["restricted_ok"]) -> MetaOapg.properties.restricted_ok: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["safe_ok"]) -> MetaOapg.properties.safe_ok: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["screens_ok"]) -> MetaOapg.properties.screens_ok: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["videos_ok"]) -> MetaOapg.properties.videos_ok: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["art_ok", "has_geo", "images_ok", "moderate_ok", "photos_ok", "restricted_ok", "safe_ok", "screens_ok", "videos_ok", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["art_ok"]) -> typing.Union[MetaOapg.properties.art_ok, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_geo"]) -> typing.Union[MetaOapg.properties.has_geo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["images_ok"]) -> typing.Union[MetaOapg.properties.images_ok, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["moderate_ok"]) -> typing.Union[MetaOapg.properties.moderate_ok, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["photos_ok"]) -> typing.Union[MetaOapg.properties.photos_ok, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["restricted_ok"]) -> typing.Union[MetaOapg.properties.restricted_ok, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["safe_ok"]) -> typing.Union[MetaOapg.properties.safe_ok, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["screens_ok"]) -> typing.Union[MetaOapg.properties.screens_ok, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["videos_ok"]) -> typing.Union[MetaOapg.properties.videos_ok, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["art_ok", "has_geo", "images_ok", "moderate_ok", "photos_ok", "restricted_ok", "safe_ok", "screens_ok", "videos_ok", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        art_ok: typing.Union[MetaOapg.properties.art_ok, bool, schemas.Unset] = schemas.unset,
        has_geo: typing.Union[MetaOapg.properties.has_geo, bool, schemas.Unset] = schemas.unset,
        images_ok: typing.Union[MetaOapg.properties.images_ok, bool, schemas.Unset] = schemas.unset,
        moderate_ok: typing.Union[MetaOapg.properties.moderate_ok, bool, schemas.Unset] = schemas.unset,
        photos_ok: typing.Union[MetaOapg.properties.photos_ok, bool, schemas.Unset] = schemas.unset,
        restricted_ok: typing.Union[MetaOapg.properties.restricted_ok, bool, schemas.Unset] = schemas.unset,
        safe_ok: typing.Union[MetaOapg.properties.safe_ok, bool, schemas.Unset] = schemas.unset,
        screens_ok: typing.Union[MetaOapg.properties.screens_ok, bool, schemas.Unset] = schemas.unset,
        videos_ok: typing.Union[MetaOapg.properties.videos_ok, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GroupRestrictions':
        return super().__new__(
            cls,
            *args,
            art_ok=art_ok,
            has_geo=has_geo,
            images_ok=images_ok,
            moderate_ok=moderate_ok,
            photos_ok=photos_ok,
            restricted_ok=restricted_ok,
            safe_ok=safe_ok,
            screens_ok=screens_ok,
            videos_ok=videos_ok,
            _configuration=_configuration,
            **kwargs,
        )
