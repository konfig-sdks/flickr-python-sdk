# coding: utf-8

"""
    Flickr API Schema

    A subset of Flickr's API defined in Swagger format.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from flickr_python_sdk import schemas  # noqa: F401


class Owner(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            iconfarm = schemas.StrSchema
            iconserver = schemas.StrSchema
            is_ad_free = schemas.BoolSchema
            ispro = schemas.BoolSchema
            location = schemas.StrSchema
            noindexfollow = schemas.BoolSchema
            nsid = schemas.StrSchema
            path_alias = schemas.StrSchema
            realname = schemas.StrSchema
            username = schemas.StrSchema
            __annotations__ = {
                "iconfarm": iconfarm,
                "iconserver": iconserver,
                "is_ad_free": is_ad_free,
                "ispro": ispro,
                "location": location,
                "noindexfollow": noindexfollow,
                "nsid": nsid,
                "path_alias": path_alias,
                "realname": realname,
                "username": username,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iconfarm"]) -> MetaOapg.properties.iconfarm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iconserver"]) -> MetaOapg.properties.iconserver: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_ad_free"]) -> MetaOapg.properties.is_ad_free: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ispro"]) -> MetaOapg.properties.ispro: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["noindexfollow"]) -> MetaOapg.properties.noindexfollow: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nsid"]) -> MetaOapg.properties.nsid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["path_alias"]) -> MetaOapg.properties.path_alias: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["realname"]) -> MetaOapg.properties.realname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["iconfarm", "iconserver", "is_ad_free", "ispro", "location", "noindexfollow", "nsid", "path_alias", "realname", "username", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iconfarm"]) -> typing.Union[MetaOapg.properties.iconfarm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iconserver"]) -> typing.Union[MetaOapg.properties.iconserver, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_ad_free"]) -> typing.Union[MetaOapg.properties.is_ad_free, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ispro"]) -> typing.Union[MetaOapg.properties.ispro, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union[MetaOapg.properties.location, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["noindexfollow"]) -> typing.Union[MetaOapg.properties.noindexfollow, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nsid"]) -> typing.Union[MetaOapg.properties.nsid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["path_alias"]) -> typing.Union[MetaOapg.properties.path_alias, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["realname"]) -> typing.Union[MetaOapg.properties.realname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union[MetaOapg.properties.username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["iconfarm", "iconserver", "is_ad_free", "ispro", "location", "noindexfollow", "nsid", "path_alias", "realname", "username", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        iconfarm: typing.Union[MetaOapg.properties.iconfarm, str, schemas.Unset] = schemas.unset,
        iconserver: typing.Union[MetaOapg.properties.iconserver, str, schemas.Unset] = schemas.unset,
        is_ad_free: typing.Union[MetaOapg.properties.is_ad_free, bool, schemas.Unset] = schemas.unset,
        ispro: typing.Union[MetaOapg.properties.ispro, bool, schemas.Unset] = schemas.unset,
        location: typing.Union[MetaOapg.properties.location, str, schemas.Unset] = schemas.unset,
        noindexfollow: typing.Union[MetaOapg.properties.noindexfollow, bool, schemas.Unset] = schemas.unset,
        nsid: typing.Union[MetaOapg.properties.nsid, str, schemas.Unset] = schemas.unset,
        path_alias: typing.Union[MetaOapg.properties.path_alias, str, schemas.Unset] = schemas.unset,
        realname: typing.Union[MetaOapg.properties.realname, str, schemas.Unset] = schemas.unset,
        username: typing.Union[MetaOapg.properties.username, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Owner':
        return super().__new__(
            cls,
            *args,
            iconfarm=iconfarm,
            iconserver=iconserver,
            is_ad_free=is_ad_free,
            ispro=ispro,
            location=location,
            noindexfollow=noindexfollow,
            nsid=nsid,
            path_alias=path_alias,
            realname=realname,
            username=username,
            _configuration=_configuration,
            **kwargs,
        )
