# coding: utf-8

"""
    Flickr API Schema

    A subset of Flickr's API defined in Swagger format.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from flickr_python_sdk import schemas  # noqa: F401


class Person(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def description() -> typing.Type['PersonDescription']:
                return PersonDescription
            can_buy_pro = schemas.BoolSchema
        
            @staticmethod
            def cover() -> typing.Type['Cover']:
                return Cover
        
            @staticmethod
            def coverphoto() -> typing.Type['PhotoURLs']:
                return PhotoURLs
            coverphoto_farm = schemas.StrSchema
            coverphoto_server = schemas.StrSchema
        
            @staticmethod
            def disable_keyboard_shortcuts() -> typing.Type['PersonDisableKeyboardShortcuts']:
                return PersonDisableKeyboardShortcuts
            expire = schemas.BoolSchema
            has_stats = schemas.BoolSchema
            iconfarm = schemas.StrSchema
            iconserver = schemas.StrSchema
            id = schemas.StrSchema
            is_ad_free = schemas.BoolSchema
            ispro = schemas.BoolSchema
        
            @staticmethod
            def location() -> typing.Type['PersonLocation']:
                return PersonLocation
        
            @staticmethod
            def mbox_sha1sum() -> typing.Type['PersonMboxSha1Sum']:
                return PersonMboxSha1Sum
        
            @staticmethod
            def mobileurl() -> typing.Type['PersonMobileurl']:
                return PersonMobileurl
            nsid = schemas.StrSchema
            path_alias = schemas.StrSchema
        
            @staticmethod
            def photos() -> typing.Type['PersonPhotos']:
                return PersonPhotos
        
            @staticmethod
            def photosurl() -> typing.Type['PersonPhotosurl']:
                return PersonPhotosurl
        
            @staticmethod
            def profileurl() -> typing.Type['PersonProfileurl']:
                return PersonProfileurl
        
            @staticmethod
            def realname() -> typing.Type['PersonRealname']:
                return PersonRealname
        
            @staticmethod
            def timezone() -> typing.Type['PersonTimezone']:
                return PersonTimezone
        
            @staticmethod
            def unread_messages() -> typing.Type['PersonUnreadMessages']:
                return PersonUnreadMessages
            user_secret = schemas.StrSchema
        
            @staticmethod
            def username() -> typing.Type['PersonUsername']:
                return PersonUsername
            yintl = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "can_buy_pro": can_buy_pro,
                "cover": cover,
                "coverphoto": coverphoto,
                "coverphoto_farm": coverphoto_farm,
                "coverphoto_server": coverphoto_server,
                "disable_keyboard_shortcuts": disable_keyboard_shortcuts,
                "expire": expire,
                "has_stats": has_stats,
                "iconfarm": iconfarm,
                "iconserver": iconserver,
                "id": id,
                "is_ad_free": is_ad_free,
                "ispro": ispro,
                "location": location,
                "mbox_sha1sum": mbox_sha1sum,
                "mobileurl": mobileurl,
                "nsid": nsid,
                "path_alias": path_alias,
                "photos": photos,
                "photosurl": photosurl,
                "profileurl": profileurl,
                "realname": realname,
                "timezone": timezone,
                "unread_messages": unread_messages,
                "user_secret": user_secret,
                "username": username,
                "yintl": yintl,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> 'PersonDescription': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_buy_pro"]) -> MetaOapg.properties.can_buy_pro: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cover"]) -> 'Cover': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coverphoto"]) -> 'PhotoURLs': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coverphoto_farm"]) -> MetaOapg.properties.coverphoto_farm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coverphoto_server"]) -> MetaOapg.properties.coverphoto_server: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disable_keyboard_shortcuts"]) -> 'PersonDisableKeyboardShortcuts': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expire"]) -> MetaOapg.properties.expire: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_stats"]) -> MetaOapg.properties.has_stats: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iconfarm"]) -> MetaOapg.properties.iconfarm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iconserver"]) -> MetaOapg.properties.iconserver: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_ad_free"]) -> MetaOapg.properties.is_ad_free: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ispro"]) -> MetaOapg.properties.ispro: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> 'PersonLocation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mbox_sha1sum"]) -> 'PersonMboxSha1Sum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mobileurl"]) -> 'PersonMobileurl': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nsid"]) -> MetaOapg.properties.nsid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["path_alias"]) -> MetaOapg.properties.path_alias: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["photos"]) -> 'PersonPhotos': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["photosurl"]) -> 'PersonPhotosurl': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profileurl"]) -> 'PersonProfileurl': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["realname"]) -> 'PersonRealname': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> 'PersonTimezone': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unread_messages"]) -> 'PersonUnreadMessages': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_secret"]) -> MetaOapg.properties.user_secret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> 'PersonUsername': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yintl"]) -> MetaOapg.properties.yintl: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "can_buy_pro", "cover", "coverphoto", "coverphoto_farm", "coverphoto_server", "disable_keyboard_shortcuts", "expire", "has_stats", "iconfarm", "iconserver", "id", "is_ad_free", "ispro", "location", "mbox_sha1sum", "mobileurl", "nsid", "path_alias", "photos", "photosurl", "profileurl", "realname", "timezone", "unread_messages", "user_secret", "username", "yintl", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union['PersonDescription', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_buy_pro"]) -> typing.Union[MetaOapg.properties.can_buy_pro, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cover"]) -> typing.Union['Cover', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coverphoto"]) -> typing.Union['PhotoURLs', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coverphoto_farm"]) -> typing.Union[MetaOapg.properties.coverphoto_farm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coverphoto_server"]) -> typing.Union[MetaOapg.properties.coverphoto_server, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disable_keyboard_shortcuts"]) -> typing.Union['PersonDisableKeyboardShortcuts', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expire"]) -> typing.Union[MetaOapg.properties.expire, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_stats"]) -> typing.Union[MetaOapg.properties.has_stats, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iconfarm"]) -> typing.Union[MetaOapg.properties.iconfarm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iconserver"]) -> typing.Union[MetaOapg.properties.iconserver, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_ad_free"]) -> typing.Union[MetaOapg.properties.is_ad_free, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ispro"]) -> typing.Union[MetaOapg.properties.ispro, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union['PersonLocation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mbox_sha1sum"]) -> typing.Union['PersonMboxSha1Sum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mobileurl"]) -> typing.Union['PersonMobileurl', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nsid"]) -> typing.Union[MetaOapg.properties.nsid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["path_alias"]) -> typing.Union[MetaOapg.properties.path_alias, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["photos"]) -> typing.Union['PersonPhotos', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["photosurl"]) -> typing.Union['PersonPhotosurl', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profileurl"]) -> typing.Union['PersonProfileurl', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["realname"]) -> typing.Union['PersonRealname', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> typing.Union['PersonTimezone', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unread_messages"]) -> typing.Union['PersonUnreadMessages', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_secret"]) -> typing.Union[MetaOapg.properties.user_secret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union['PersonUsername', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yintl"]) -> typing.Union[MetaOapg.properties.yintl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "can_buy_pro", "cover", "coverphoto", "coverphoto_farm", "coverphoto_server", "disable_keyboard_shortcuts", "expire", "has_stats", "iconfarm", "iconserver", "id", "is_ad_free", "ispro", "location", "mbox_sha1sum", "mobileurl", "nsid", "path_alias", "photos", "photosurl", "profileurl", "realname", "timezone", "unread_messages", "user_secret", "username", "yintl", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union['PersonDescription', schemas.Unset] = schemas.unset,
        can_buy_pro: typing.Union[MetaOapg.properties.can_buy_pro, bool, schemas.Unset] = schemas.unset,
        cover: typing.Union['Cover', schemas.Unset] = schemas.unset,
        coverphoto: typing.Union['PhotoURLs', schemas.Unset] = schemas.unset,
        coverphoto_farm: typing.Union[MetaOapg.properties.coverphoto_farm, str, schemas.Unset] = schemas.unset,
        coverphoto_server: typing.Union[MetaOapg.properties.coverphoto_server, str, schemas.Unset] = schemas.unset,
        disable_keyboard_shortcuts: typing.Union['PersonDisableKeyboardShortcuts', schemas.Unset] = schemas.unset,
        expire: typing.Union[MetaOapg.properties.expire, bool, schemas.Unset] = schemas.unset,
        has_stats: typing.Union[MetaOapg.properties.has_stats, bool, schemas.Unset] = schemas.unset,
        iconfarm: typing.Union[MetaOapg.properties.iconfarm, str, schemas.Unset] = schemas.unset,
        iconserver: typing.Union[MetaOapg.properties.iconserver, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        is_ad_free: typing.Union[MetaOapg.properties.is_ad_free, bool, schemas.Unset] = schemas.unset,
        ispro: typing.Union[MetaOapg.properties.ispro, bool, schemas.Unset] = schemas.unset,
        location: typing.Union['PersonLocation', schemas.Unset] = schemas.unset,
        mbox_sha1sum: typing.Union['PersonMboxSha1Sum', schemas.Unset] = schemas.unset,
        mobileurl: typing.Union['PersonMobileurl', schemas.Unset] = schemas.unset,
        nsid: typing.Union[MetaOapg.properties.nsid, str, schemas.Unset] = schemas.unset,
        path_alias: typing.Union[MetaOapg.properties.path_alias, str, schemas.Unset] = schemas.unset,
        photos: typing.Union['PersonPhotos', schemas.Unset] = schemas.unset,
        photosurl: typing.Union['PersonPhotosurl', schemas.Unset] = schemas.unset,
        profileurl: typing.Union['PersonProfileurl', schemas.Unset] = schemas.unset,
        realname: typing.Union['PersonRealname', schemas.Unset] = schemas.unset,
        timezone: typing.Union['PersonTimezone', schemas.Unset] = schemas.unset,
        unread_messages: typing.Union['PersonUnreadMessages', schemas.Unset] = schemas.unset,
        user_secret: typing.Union[MetaOapg.properties.user_secret, str, schemas.Unset] = schemas.unset,
        username: typing.Union['PersonUsername', schemas.Unset] = schemas.unset,
        yintl: typing.Union[MetaOapg.properties.yintl, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Person':
        return super().__new__(
            cls,
            *args,
            description=description,
            can_buy_pro=can_buy_pro,
            cover=cover,
            coverphoto=coverphoto,
            coverphoto_farm=coverphoto_farm,
            coverphoto_server=coverphoto_server,
            disable_keyboard_shortcuts=disable_keyboard_shortcuts,
            expire=expire,
            has_stats=has_stats,
            iconfarm=iconfarm,
            iconserver=iconserver,
            id=id,
            is_ad_free=is_ad_free,
            ispro=ispro,
            location=location,
            mbox_sha1sum=mbox_sha1sum,
            mobileurl=mobileurl,
            nsid=nsid,
            path_alias=path_alias,
            photos=photos,
            photosurl=photosurl,
            profileurl=profileurl,
            realname=realname,
            timezone=timezone,
            unread_messages=unread_messages,
            user_secret=user_secret,
            username=username,
            yintl=yintl,
            _configuration=_configuration,
            **kwargs,
        )

from flickr_python_sdk.model.cover import Cover
from flickr_python_sdk.model.person_description import PersonDescription
from flickr_python_sdk.model.person_disable_keyboard_shortcuts import PersonDisableKeyboardShortcuts
from flickr_python_sdk.model.person_location import PersonLocation
from flickr_python_sdk.model.person_mbox_sha1_sum import PersonMboxSha1Sum
from flickr_python_sdk.model.person_mobileurl import PersonMobileurl
from flickr_python_sdk.model.person_photos import PersonPhotos
from flickr_python_sdk.model.person_photosurl import PersonPhotosurl
from flickr_python_sdk.model.person_profileurl import PersonProfileurl
from flickr_python_sdk.model.person_realname import PersonRealname
from flickr_python_sdk.model.person_timezone import PersonTimezone
from flickr_python_sdk.model.person_unread_messages import PersonUnreadMessages
from flickr_python_sdk.model.person_username import PersonUsername
from flickr_python_sdk.model.photo_urls import PhotoURLs
